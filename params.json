{"name":"restful.io","tagline":"HTTP-like realtime routing module for NodeJS built on top of socket.io","body":"restful.io\r\n==========\r\n\r\nrestful.io is a micro framework built on the shoulders of [socket.io](http://socket.io). It was designed to get HTTP possibilities, without using HTTP itself. By using socket.io, transport layer is made completely abstract.\r\n\r\nI started this project because i needed a simple way to manage realtime routing on the server side. I do believe that a very light client (pure HTML and JS), communicating with the server layer using realtime technologies is a very good and extremely portable paradigm.\r\n\r\nInspirations\r\n------------\r\n- [Play Framework 2](https://github.com/playframework/playframework)\r\n- [Express.io](https://github.com/techpines/express.io)\r\n- RESTful architectures\r\n- [HTTP](http://fr.wikipedia.org/wiki/Hypertext_Transfer_Protocol)\r\n\r\nInstallation\r\n------------\r\n`npm install --save restful.io`\r\n\r\nMain features\r\n------------\r\n* Routing system\r\n* Session management\r\n* Client API (needs to be improved)\r\n* File upload (using [socket.io-stream](https://www.npmjs.com/package/socket.io-stream))\r\n\r\nWhat does it look like\r\n-----\r\nBelow is a quick presentation of the module in Coffeescript. You may check examples folder (currently ***NOT*** up to date) and test (currently up to date) folder for more.\r\n\r\n\r\n### Routing\r\n\r\n```coffeescript\r\nio = require('socket.io')(http)\r\nRestfulRouter = require \"restful.io\"\r\n\r\ncontrollers = {\r\n  UserController: {\r\n    findAll: (route) ->\r\n      route.OK(\"All users\")\r\n    create: (route, user) ->\r\n      route.OK(\"User #{user.id} has been created\")\r\n  }\r\n}\r\n\r\nrouter = new RestfulRouter(controllers, {\r\n  GET: [\r\n    {\r\n      uri: \"/user\"\r\n      to: \"UserController.findAll()\"\r\n      public: true\r\n    }\r\n  ]\r\n  PUT: [\r\n    {\r\n      uri: \"/user\"\r\n      to: \"UserController.create(p:user)\"\r\n      public: true\r\n    }\r\n  ]\r\n}, true)\r\n\r\nrouter.start(io)\r\n```\r\n\r\n### Session management\r\n\r\nNo \"public\" attributes for routes. Those routes are considered as \"private\", which means you need a valid session to access them. When you will get it, it will be automagically injected on private routes.\r\n\r\n```coffeescript\r\ncontrollers = {\r\n  UserController: {\r\n    login: (route, credentials) ->\r\n      route.withNewSession({username: credentials.username}).OK(\"You are now logged in\")\r\n    me: (route, session) ->\r\n      route.OK(\"Welcome back #{session.username}\")\r\n  }\r\n}\r\n\r\nrouter = new RestfulRouter(controllers, {\r\n  POST: [\r\n    {\r\n      uri: \"/login\"\r\n      to: \"UserController.login(p:credentials)\"\r\n      public: true\r\n    }\r\n  ]\r\n  GET: [\r\n    {\r\n      uri: \"/me\"\r\n      to: \"UserController.me()\"\r\n    }\r\n  ]\r\n}, true)\r\n\r\nrouter.start(io)\r\n```\r\n\r\n### Client API\r\n\r\nOn the client side, you may create this file :\r\n\r\n```coffeescript\r\nio = require 'socket.io-client'\r\nss = require 'socket.io-stream'\r\n\r\nmodule.exports = (callback) ->\r\n  socket = io('http://yourdomain.com:1234')\r\n  socket.on 'connect', () ->\r\n    socket.emit('GET:/api')\r\n\r\n    socket.on 'GET:RESULT', (apiSrc) ->\r\n      API = eval(apiSrc.data)(socket, ss, true)\r\n      callback(API)\r\n```\r\n\r\nThen :\r\n\r\n```coffeescript\r\nrequire(\"./yourfile.coffee\") (API) ->\r\n  # Feel free to use API object :)\r\n  API.POST '/login', {credentials: {username: 'foobar'}}, (result) ->\r\n    # Here we set the \"token\" (session id)\r\n    API.token = result.headers.token\r\n    API.GET '/me', {}, (result) ->\r\n      console.log result.data\r\n```\r\n\r\n### File upload\r\n\r\nTODO\r\n\r\n\r\n\r\nAPI\r\n----\r\n\r\n### Server\r\n\r\n##### Route object\r\n\r\n| Method | Parameters | Effect | Example |\r\n| ---- | ---- | -------- | ------  |\r\n| OK  | data: * | Sends back data to the client with a 200 result | route.OK({message: \"done\"}) |\r\n| FORBIDDEN | err: * | Sends back err to the client with a 403 result | route.FORBIDDEN(\"Error !!\") |\r\n| ISE | err: * | Sends back err to the client with a 500 result | route.ISE(\"Error !!\") |\r\n| NOT_FOUND | err: * | Sends back err to the client with a 404 result | route.NOT_FOUND(\"Error !!\") |\r\n\r\n##### Result object\r\n\r\n| Property | Possible values |\r\n| -------- | ----------------- |\r\n| status  | 200, 403, 500, 404 |\r\n| data | any string |\r\n| headers | JS object, used for token |\r\n\r\n### Client\r\n\r\n##### API object\r\n\r\nAPI object is automatically generated from your routes. Basically, the way to call a route is :\r\n\r\n```coffeescript\r\nAPI.METHOD '/route/you.want', {param:\"foobar\"}, (result) ->\r\n  # Use the result here\r\n```\r\n\r\nThe only special property you have to worry about is \"token\" which is your session id.\r\n\r\nTests\r\n----\r\n```shell\r\nnpm test\r\n```\r\n\r\n\r\nWarranty\r\n--------\r\nrestful.io is currently under heavy development. I'm building this project for myself and i try to make the code as clean as possible (which is far away from now :)). Feel free to submit a PR. Same for this README.\r\n\r\n\r\nCurrently working on\r\n---------\r\n- Update examples\r\n- True client API\r\n- File support\r\n- Using socket.io namespaces\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}